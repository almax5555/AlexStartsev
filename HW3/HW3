1. Создать bash-скрипт собирающий данные о количестве свободной памяти, 
текущей загрузке процессора, ip-адрес, вывести в формате «Ключ: значение», 
причем все ключи заменить на русские названия, например чтобы вместо «Mem: 1024Mb» 
получалось «Память: 1024Мб», для приведения к нужному формату использовать grep, sed и awk.

[alex@localhost ~]$ touch Myscript
[alex@localhost ~]$ chmod +x ./Myscript 

[alex@localhost ~]$ ./Myscript 
Кол-во свободной памяти:   146 Мб
Загрузка процессора:       0.05
IP-аддрес:                 192.168.8.105/24

[alex@localhost ~]$ nano ./Myscript 
!/bin/bash
free -h | awk '/Mem/{print $1$3}'| sed -e 's/Mem:/Кол-во свободной памяти:   /g' -e 's/M/ Мб/g';
cat /proc/loadavg | awk '{$9 = "Загрузка процессора:	   " ; print $9$3}'  ;
ip a | grep enp0s9 | awk '/inet/ {print $1$2}' | sed -e 's/inet/IP-аддрес:                 /g' ;

2. Написать bash-скрипт который создает пользователя (принимает имя в качестве первого аргумента) 
и создает в его домашней директории файл с информацией о системе: Ядро, CPU, RAM, 
Дисковая подсистема (lscpu, lsblk, uname, etc). Вывод каждой команды должен быть отделен 
сепаратором (например ====)


[Alex@localhost ~]$ touch new_user_script
[Alex@localhost ~]$ chmod +x ./new_user_script 
[root@localhost Alex]# nano ./new_user_script 

!/bin/bash

sudo useradd -m $1
sysinfo=/home/$1/sysinfo.info;
echo ====****==== >> $sysinfo
lscpu >> $sysinfo
echo ====****==== >> $sysinfo
lsblk >> $sysinfo
echo ====****==== >> $sysinfo
uname >> $sysinfo
echo ====****==== >> $sysinfo
df >> $sysinfo

[root@localhost Alex]# ./new_user_script Test1
[root@localhost Test1]# cat sysinfo.info 
====****====
Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
CPU(s):                1
On-line CPU(s) list:   0
Thread(s) per core:    1
Core(s) per socket:    1
Socket(s):             1
NUMA node(s):          1
Vendor ID:             GenuineIntel
CPU family:            6
Model:                 126
Model name:            Intel(R) Core(TM) i3-1005G1 CPU @ 1.20GHz
Stepping:              5
CPU MHz:               1190.400
BogoMIPS:              2380.80
Hypervisor vendor:     KVM
Virtualization type:   full
L1d cache:             48K
L1i cache:             32K
L2 cache:              512K
L3 cache:              4096K
NUMA node0 CPU(s):     0
Flags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx rdtscp lm constant_tsc rep_good nopl xtopology nonstop_tsc eagerfpu pni pclmulqdq monitor ssse3 cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx rdrand hypervisor lahf_lm abm 3dnowprefetch invpcid_single fsgsbase avx2 invpcid rdseed clflushopt md_clear flush_l1d arch_capabilities
====****====
NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda               8:0    0    8G  0 disk 
├─sda1            8:1    0    1G  0 part /boot
└─sda2            8:2    0    7G  0 part 
  ├─centos-root 253:0    0  6,2G  0 lvm  /
  └─centos-swap 253:1    0  820M  0 lvm  [SWAP]
sr0              11:0    1 1024M  0 rom  
====****====
Linux
====****====
Файловая система        1K-блоков Использовано Доступно Использовано% Cмонтировано в
devtmpfs                  1928212            0  1928212            0% /dev
tmpfs                     1940200            0  1940200            0% /dev/shm
tmpfs                     1940200         8808  1931392            1% /run
tmpfs                     1940200            0  1940200            0% /sys/fs/cgroup
/dev/mapper/centos-root   6486016      1476900  5009116           23% /
/dev/sda1                 1038336       153604   884732           15% /boot
tmpfs                      388044            0   388044            0% /run/user/0
tmpfs                      388044            0   388044            0% /run/user/1000








**
3. Cоздать файл immortalfile, запретить удаление файла даже пользователем root и попытаться его удалить из под root, результатом должно быть “Operation not permitted”. Подсказка: CHATTR(1)
